// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConfigSetGRPCClient is the client API for ConfigSetGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigSetGRPCClient interface {
	CreateConfigSet(ctx context.Context, in *NewConfigSet, opts ...grpc.CallOption) (*ConfigSet, error)
}

type configSetGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigSetGRPCClient(cc grpc.ClientConnInterface) ConfigSetGRPCClient {
	return &configSetGRPCClient{cc}
}

func (c *configSetGRPCClient) CreateConfigSet(ctx context.Context, in *NewConfigSet, opts ...grpc.CallOption) (*ConfigSet, error) {
	out := new(ConfigSet)
	err := c.cc.Invoke(ctx, "/ConfigSetGRPC/CreateConfigSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigSetGRPCServer is the server API for ConfigSetGRPC service.
// All implementations must embed UnimplementedConfigSetGRPCServer
// for forward compatibility
type ConfigSetGRPCServer interface {
	CreateConfigSet(context.Context, *NewConfigSet) (*ConfigSet, error)
	mustEmbedUnimplementedConfigSetGRPCServer()
}

// UnimplementedConfigSetGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedConfigSetGRPCServer struct {
}

func (UnimplementedConfigSetGRPCServer) CreateConfigSet(context.Context, *NewConfigSet) (*ConfigSet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfigSet not implemented")
}
func (UnimplementedConfigSetGRPCServer) mustEmbedUnimplementedConfigSetGRPCServer() {}

// UnsafeConfigSetGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigSetGRPCServer will
// result in compilation errors.
type UnsafeConfigSetGRPCServer interface {
	mustEmbedUnimplementedConfigSetGRPCServer()
}

func RegisterConfigSetGRPCServer(s grpc.ServiceRegistrar, srv ConfigSetGRPCServer) {
	s.RegisterService(&ConfigSetGRPC_ServiceDesc, srv)
}

func _ConfigSetGRPC_CreateConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewConfigSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigSetGRPCServer).CreateConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ConfigSetGRPC/CreateConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigSetGRPCServer).CreateConfigSet(ctx, req.(*NewConfigSet))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigSetGRPC_ServiceDesc is the grpc.ServiceDesc for ConfigSetGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigSetGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ConfigSetGRPC",
	HandlerType: (*ConfigSetGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConfigSet",
			Handler:    _ConfigSetGRPC_CreateConfigSet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/grpc/pb/configset.proto",
}
